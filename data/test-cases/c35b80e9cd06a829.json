{"uid":"c35b80e9cd06a829","name":"test_b2b_page_add_request_success","fullName":"test.test_cms_page#test_b2b_page_add_request_success","historyId":"6456f37e41f3102d3bb2beb88bbb8326","time":{"start":1743158542740,"stop":1743158544637,"duration":1897},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"banner-button button open-modal\">...</button> is not clickable at point (893, 65). Other element would receive the click: <div class=\"menu-wrapper\">...</div>\n  (Session info: chrome=134.0.6998.165)\nStacktrace:\n#0 0x5584cafeaffa <unknown>\n#1 0x5584caaa9970 <unknown>\n#2 0x5584cab021ec <unknown>\n#3 0x5584cab00055 <unknown>\n#4 0x5584caafd6f2 <unknown>\n#5 0x5584caafc8ca <unknown>\n#6 0x5584caaef8cd <unknown>\n#7 0x5584cab21292 <unknown>\n#8 0x5584caaeee4a <unknown>\n#9 0x5584cab2145e <unknown>\n#10 0x5584cab4770c <unknown>\n#11 0x5584cab21063 <unknown>\n#12 0x5584caaed328 <unknown>\n#13 0x5584caaee491 <unknown>\n#14 0x5584cafb242b <unknown>\n#15 0x5584cafb62ec <unknown>\n#16 0x5584caf99a22 <unknown>\n#17 0x5584cafb6e64 <unknown>\n#18 0x5584caf7dbef <unknown>\n#19 0x5584cafd9558 <unknown>\n#20 0x5584cafd9736 <unknown>\n#21 0x5584cafe9e76 <unknown>\n#22 0x7f5c74a9caa4 <unknown>\n#23 0x7f5c74b29c3c <unknown>","statusTrace":"cls = <class '_pytest.runner.CallInfo'>\nfunc = <function call_and_report.<locals>.<lambda> at 0x7f5439ee0360>\nwhen = 'call'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: Callable[[], TResult],\n        when: Literal[\"collect\", \"setup\", \"call\", \"teardown\"],\n        reraise: type[BaseException] | tuple[type[BaseException], ...] | None = None,\n    ) -> CallInfo[TResult]:\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :type func: Callable[[], _pytest.runner.TResult]\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: TResult | None = func()\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/runner.py:341: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>       lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise\n    )\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/runner.py:242: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <HookCaller 'pytest_runtest_call'>\nkwargs = {'item': <Function test_b2b_page_add_request_success>}\nfirstresult = False\n\n    def __call__(self, **kwargs: object) -> Any:\n        \"\"\"Call the hook.\n    \n        Only accepts keyword arguments, which should match the hook\n        specification.\n    \n        Returns the result(s) of calling all registered plugins, see\n        :ref:`calling`.\n        \"\"\"\n        assert (\n            not self.is_historic()\n        ), \"Cannot directly call a historic hook - use call_historic instead.\"\n        self._verify_all_args_are_provided(kwargs)\n        firstresult = self.spec.opts.get(\"firstresult\", False) if self.spec else False\n        # Copy because plugins may register other plugins during iteration (#438).\n>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_hooks.py:513: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <_pytest.config.PytestPluginManager object at 0x7f543cddc2f0>\nhook_name = 'pytest_runtest_call'\nmethods = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/pyth...tion' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/unraisableexception.py'>>, ...]\nkwargs = {'item': <Function test_b2b_page_add_request_success>}\nfirstresult = False\n\n    def _hookexec(\n        self,\n        hook_name: str,\n        methods: Sequence[HookImpl],\n        kwargs: Mapping[str, object],\n        firstresult: bool,\n    ) -> object | list[object]:\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_manager.py:120: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhook_name = 'pytest_runtest_call'\nhook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/pyth...tion' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/unraisableexception.py'>>, ...]\ncaller_kwargs = {'item': <Function test_b2b_page_add_request_success>}\nfirstresult = False\n\n    def _multicall(\n        hook_name: str,\n        hook_impls: Sequence[HookImpl],\n        caller_kwargs: Mapping[str, object],\n        firstresult: bool,\n    ) -> object | list[object]:\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results: list[object] = []\n        exception = None\n        only_new_style_wrappers = True\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns: list[Teardown] = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        only_new_style_wrappers = False\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            wrapper_gen = cast(Generator[None, Result[object], None], res)\n                            next(wrapper_gen)  # first yield\n                            teardowns.append((wrapper_gen, hook_impl))\n                        except StopIteration:\n                            _raise_wrapfail(wrapper_gen, \"did not yield\")\n                    elif hook_impl.wrapper:\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            function_gen = cast(Generator[None, object, object], res)\n                            next(function_gen)  # first yield\n                            teardowns.append(function_gen)\n                        except StopIteration:\n                            _raise_wrapfail(function_gen, \"did not yield\")\n                    else:\n                        res = hook_impl.function(*args)\n                        if res is not None:\n                            results.append(res)\n                            if firstresult:  # halt further impl calls\n                                break\n            except BaseException as exc:\n                exception = exc\n        finally:\n            # Fast path - only new-style wrappers, no Result.\n            if only_new_style_wrappers:\n                if firstresult:  # first result hooks return a single value\n                    result = results[0] if results else None\n                else:\n                    result = results\n    \n                # run all wrapper post-yield blocks\n                for teardown in reversed(teardowns):\n                    try:\n                        if exception is not None:\n                            teardown.throw(exception)  # type: ignore[union-attr]\n                        else:\n                            teardown.send(result)  # type: ignore[union-attr]\n                        # Following is unreachable for a well behaved hook wrapper.\n                        # Try to force finalizers otherwise postponed till GC action.\n                        # Note: close() may raise if generator handles GeneratorExit.\n                        teardown.close()  # type: ignore[union-attr]\n                    except StopIteration as si:\n                        result = si.value\n                        exception = None\n                        continue\n                    except BaseException as e:\n                        exception = e\n                        continue\n                    _raise_wrapfail(teardown, \"has second yield\")  # type: ignore[arg-type]\n    \n                if exception is not None:\n                    raise exception.with_traceback(exception.__traceback__)\n                else:\n                    return result\n    \n            # Slow path - need to support old-style wrappers.\n            else:\n                if firstresult:  # first result hooks return a single value\n                    outcome: Result[object | list[object]] = Result(\n                        results[0] if results else None, exception\n                    )\n                else:\n                    outcome = Result(results, exception)\n    \n                # run all wrapper post-yield blocks\n                for teardown in reversed(teardowns):\n                    if isinstance(teardown, tuple):\n                        try:\n                            teardown[0].send(outcome)\n                        except StopIteration:\n                            pass\n                        except BaseException as e:\n                            _warn_teardown_exception(hook_name, teardown[1], e)\n                            raise\n                        else:\n                            _raise_wrapfail(teardown[0], \"has second yield\")\n                    else:\n                        try:\n                            if outcome._exception is not None:\n                                teardown.throw(outcome._exception)\n                            else:\n                                teardown.send(outcome._result)\n                            # Following is unreachable for a well behaved hook wrapper.\n                            # Try to force finalizers otherwise postponed till GC action.\n                            # Note: close() may raise if generator handles GeneratorExit.\n                            teardown.close()\n                        except StopIteration as si:\n                            outcome.force_result(si.value)\n                            continue\n                        except BaseException as e:\n                            outcome.force_exception(e)\n                            continue\n                        _raise_wrapfail(teardown, \"has second yield\")\n    \n>               return outcome.get_result()\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_callers.py:182: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pluggy._result.Result object at 0x7f543b896d70>\n\n    def get_result(self) -> ResultType:\n        \"\"\"Get the result(s) for this hook call.\n    \n        If the hook was marked as a ``firstresult`` only a single value\n        will be returned, otherwise a list of results.\n        \"\"\"\n        __tracebackhide__ = True\n        exc = self._exception\n        if exc is None:\n            return cast(ResultType, self._result)\n        else:\n>           raise exc.with_traceback(exc.__traceback__)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_result.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhook_name = 'pytest_runtest_call'\nhook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/pyth...tion' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/unraisableexception.py'>>, ...]\ncaller_kwargs = {'item': <Function test_b2b_page_add_request_success>}\nfirstresult = False\n\n    def _multicall(\n        hook_name: str,\n        hook_impls: Sequence[HookImpl],\n        caller_kwargs: Mapping[str, object],\n        firstresult: bool,\n    ) -> object | list[object]:\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results: list[object] = []\n        exception = None\n        only_new_style_wrappers = True\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns: list[Teardown] = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        only_new_style_wrappers = False\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            wrapper_gen = cast(Generator[None, Result[object], None], res)\n                            next(wrapper_gen)  # first yield\n                            teardowns.append((wrapper_gen, hook_impl))\n                        except StopIteration:\n                            _raise_wrapfail(wrapper_gen, \"did not yield\")\n                    elif hook_impl.wrapper:\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            function_gen = cast(Generator[None, object, object], res)\n                            next(function_gen)  # first yield\n                            teardowns.append(function_gen)\n                        except StopIteration:\n                            _raise_wrapfail(function_gen, \"did not yield\")\n                    else:\n                        res = hook_impl.function(*args)\n                        if res is not None:\n                            results.append(res)\n                            if firstresult:  # halt further impl calls\n                                break\n            except BaseException as exc:\n                exception = exc\n        finally:\n            # Fast path - only new-style wrappers, no Result.\n            if only_new_style_wrappers:\n                if firstresult:  # first result hooks return a single value\n                    result = results[0] if results else None\n                else:\n                    result = results\n    \n                # run all wrapper post-yield blocks\n                for teardown in reversed(teardowns):\n                    try:\n                        if exception is not None:\n                            teardown.throw(exception)  # type: ignore[union-attr]\n                        else:\n                            teardown.send(result)  # type: ignore[union-attr]\n                        # Following is unreachable for a well behaved hook wrapper.\n                        # Try to force finalizers otherwise postponed till GC action.\n                        # Note: close() may raise if generator handles GeneratorExit.\n                        teardown.close()  # type: ignore[union-attr]\n                    except StopIteration as si:\n                        result = si.value\n                        exception = None\n                        continue\n                    except BaseException as e:\n                        exception = e\n                        continue\n                    _raise_wrapfail(teardown, \"has second yield\")  # type: ignore[arg-type]\n    \n                if exception is not None:\n                    raise exception.with_traceback(exception.__traceback__)\n                else:\n                    return result\n    \n            # Slow path - need to support old-style wrappers.\n            else:\n                if firstresult:  # first result hooks return a single value\n                    outcome: Result[object | list[object]] = Result(\n                        results[0] if results else None, exception\n                    )\n                else:\n                    outcome = Result(results, exception)\n    \n                # run all wrapper post-yield blocks\n                for teardown in reversed(teardowns):\n                    if isinstance(teardown, tuple):\n                        try:\n                            teardown[0].send(outcome)\n                        except StopIteration:\n                            pass\n                        except BaseException as e:\n                            _warn_teardown_exception(hook_name, teardown[1], e)\n                            raise\n                        else:\n                            _raise_wrapfail(teardown[0], \"has second yield\")\n                    else:\n                        try:\n                            if outcome._exception is not None:\n>                               teardown.throw(outcome._exception)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_callers.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @pytest.hookimpl(wrapper=True, tryfirst=True)\n    def pytest_runtest_call() -> Generator[None]:\n>       yield from thread_exception_runtest_hook()\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/threadexception.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def thread_exception_runtest_hook() -> Generator[None]:\n        with catch_threading_exception() as cm:\n            try:\n>               yield\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/threadexception.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhook_name = 'pytest_runtest_call'\nhook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/pyth...tion' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/unraisableexception.py'>>, ...]\ncaller_kwargs = {'item': <Function test_b2b_page_add_request_success>}\nfirstresult = False\n\n    def _multicall(\n        hook_name: str,\n        hook_impls: Sequence[HookImpl],\n        caller_kwargs: Mapping[str, object],\n        firstresult: bool,\n    ) -> object | list[object]:\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results: list[object] = []\n        exception = None\n        only_new_style_wrappers = True\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns: list[Teardown] = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        only_new_style_wrappers = False\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            wrapper_gen = cast(Generator[None, Result[object], None], res)\n                            next(wrapper_gen)  # first yield\n                            teardowns.append((wrapper_gen, hook_impl))\n                        except StopIteration:\n                            _raise_wrapfail(wrapper_gen, \"did not yield\")\n                    elif hook_impl.wrapper:\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            function_gen = cast(Generator[None, object, object], res)\n                            next(function_gen)  # first yield\n                            teardowns.append(function_gen)\n                        except StopIteration:\n                            _raise_wrapfail(function_gen, \"did not yield\")\n                    else:\n                        res = hook_impl.function(*args)\n                        if res is not None:\n                            results.append(res)\n                            if firstresult:  # halt further impl calls\n                                break\n            except BaseException as exc:\n                exception = exc\n        finally:\n            # Fast path - only new-style wrappers, no Result.\n            if only_new_style_wrappers:\n                if firstresult:  # first result hooks return a single value\n                    result = results[0] if results else None\n                else:\n                    result = results\n    \n                # run all wrapper post-yield blocks\n                for teardown in reversed(teardowns):\n                    try:\n                        if exception is not None:\n                            teardown.throw(exception)  # type: ignore[union-attr]\n                        else:\n                            teardown.send(result)  # type: ignore[union-attr]\n                        # Following is unreachable for a well behaved hook wrapper.\n                        # Try to force finalizers otherwise postponed till GC action.\n                        # Note: close() may raise if generator handles GeneratorExit.\n                        teardown.close()  # type: ignore[union-attr]\n                    except StopIteration as si:\n                        result = si.value\n                        exception = None\n                        continue\n                    except BaseException as e:\n                        exception = e\n                        continue\n                    _raise_wrapfail(teardown, \"has second yield\")  # type: ignore[arg-type]\n    \n                if exception is not None:\n                    raise exception.with_traceback(exception.__traceback__)\n                else:\n                    return result\n    \n            # Slow path - need to support old-style wrappers.\n            else:\n                if firstresult:  # first result hooks return a single value\n                    outcome: Result[object | list[object]] = Result(\n                        results[0] if results else None, exception\n                    )\n                else:\n                    outcome = Result(results, exception)\n    \n                # run all wrapper post-yield blocks\n                for teardown in reversed(teardowns):\n                    if isinstance(teardown, tuple):\n                        try:\n                            teardown[0].send(outcome)\n                        except StopIteration:\n                            pass\n                        except BaseException as e:\n                            _warn_teardown_exception(hook_name, teardown[1], e)\n                            raise\n                        else:\n                            _raise_wrapfail(teardown[0], \"has second yield\")\n                    else:\n                        try:\n                            if outcome._exception is not None:\n>                               teardown.throw(outcome._exception)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_callers.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @pytest.hookimpl(wrapper=True, tryfirst=True)\n    def pytest_runtest_call() -> Generator[None]:\n>       yield from unraisable_exception_runtest_hook()\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/unraisableexception.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def unraisable_exception_runtest_hook() -> Generator[None]:\n        with catch_unraisable_exception() as cm:\n            try:\n>               yield\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/unraisableexception.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhook_name = 'pytest_runtest_call'\nhook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/pyth...tion' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/unraisableexception.py'>>, ...]\ncaller_kwargs = {'item': <Function test_b2b_page_add_request_success>}\nfirstresult = False\n\n    def _multicall(\n        hook_name: str,\n        hook_impls: Sequence[HookImpl],\n        caller_kwargs: Mapping[str, object],\n        firstresult: bool,\n    ) -> object | list[object]:\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results: list[object] = []\n        exception = None\n        only_new_style_wrappers = True\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns: list[Teardown] = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        only_new_style_wrappers = False\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            wrapper_gen = cast(Generator[None, Result[object], None], res)\n                            next(wrapper_gen)  # first yield\n                            teardowns.append((wrapper_gen, hook_impl))\n                        except StopIteration:\n                            _raise_wrapfail(wrapper_gen, \"did not yield\")\n                    elif hook_impl.wrapper:\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            function_gen = cast(Generator[None, object, object], res)\n                            next(function_gen)  # first yield\n                            teardowns.append(function_gen)\n                        except StopIteration:\n                            _raise_wrapfail(function_gen, \"did not yield\")\n                    else:\n                        res = hook_impl.function(*args)\n                        if res is not None:\n                            results.append(res)\n                            if firstresult:  # halt further impl calls\n                                break\n            except BaseException as exc:\n                exception = exc\n        finally:\n            # Fast path - only new-style wrappers, no Result.\n            if only_new_style_wrappers:\n                if firstresult:  # first result hooks return a single value\n                    result = results[0] if results else None\n                else:\n                    result = results\n    \n                # run all wrapper post-yield blocks\n                for teardown in reversed(teardowns):\n                    try:\n                        if exception is not None:\n                            teardown.throw(exception)  # type: ignore[union-attr]\n                        else:\n                            teardown.send(result)  # type: ignore[union-attr]\n                        # Following is unreachable for a well behaved hook wrapper.\n                        # Try to force finalizers otherwise postponed till GC action.\n                        # Note: close() may raise if generator handles GeneratorExit.\n                        teardown.close()  # type: ignore[union-attr]\n                    except StopIteration as si:\n                        result = si.value\n                        exception = None\n                        continue\n                    except BaseException as e:\n                        exception = e\n                        continue\n                    _raise_wrapfail(teardown, \"has second yield\")  # type: ignore[arg-type]\n    \n                if exception is not None:\n                    raise exception.with_traceback(exception.__traceback__)\n                else:\n                    return result\n    \n            # Slow path - need to support old-style wrappers.\n            else:\n                if firstresult:  # first result hooks return a single value\n                    outcome: Result[object | list[object]] = Result(\n                        results[0] if results else None, exception\n                    )\n                else:\n                    outcome = Result(results, exception)\n    \n                # run all wrapper post-yield blocks\n                for teardown in reversed(teardowns):\n                    if isinstance(teardown, tuple):\n                        try:\n                            teardown[0].send(outcome)\n                        except StopIteration:\n                            pass\n                        except BaseException as e:\n                            _warn_teardown_exception(hook_name, teardown[1], e)\n                            raise\n                        else:\n                            _raise_wrapfail(teardown[0], \"has second yield\")\n                    else:\n                        try:\n                            if outcome._exception is not None:\n>                               teardown.throw(outcome._exception)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_callers.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <_pytest.logging.LoggingPlugin object at 0x7f543bcc5400>\nitem = <Function test_b2b_page_add_request_success>\n\n    @hookimpl(wrapper=True)\n    def pytest_runtest_call(self, item: nodes.Item) -> Generator[None]:\n        self.log_cli_handler.set_when(\"call\")\n    \n>       yield from self._runtest_for(item, \"call\")\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/logging.py:846: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <_pytest.logging.LoggingPlugin object at 0x7f543bcc5400>\nitem = <Function test_b2b_page_add_request_success>, when = 'call'\n\n    def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None]:\n        \"\"\"Implement the internals of the pytest_runtest_xxx() hooks.\"\"\"\n        with catching_logs(\n            self.caplog_handler,\n            level=self.log_level,\n        ) as caplog_handler, catching_logs(\n            self.report_handler,\n            level=self.log_level,\n        ) as report_handler:\n            caplog_handler.reset()\n            report_handler.reset()\n            item.stash[caplog_records_key][when] = caplog_handler.records\n            item.stash[caplog_handler_key] = caplog_handler\n    \n            try:\n>               yield\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/logging.py:829: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhook_name = 'pytest_runtest_call'\nhook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/pyth...tion' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/unraisableexception.py'>>, ...]\ncaller_kwargs = {'item': <Function test_b2b_page_add_request_success>}\nfirstresult = False\n\n    def _multicall(\n        hook_name: str,\n        hook_impls: Sequence[HookImpl],\n        caller_kwargs: Mapping[str, object],\n        firstresult: bool,\n    ) -> object | list[object]:\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results: list[object] = []\n        exception = None\n        only_new_style_wrappers = True\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns: list[Teardown] = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        only_new_style_wrappers = False\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            wrapper_gen = cast(Generator[None, Result[object], None], res)\n                            next(wrapper_gen)  # first yield\n                            teardowns.append((wrapper_gen, hook_impl))\n                        except StopIteration:\n                            _raise_wrapfail(wrapper_gen, \"did not yield\")\n                    elif hook_impl.wrapper:\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            function_gen = cast(Generator[None, object, object], res)\n                            next(function_gen)  # first yield\n                            teardowns.append(function_gen)\n                        except StopIteration:\n                            _raise_wrapfail(function_gen, \"did not yield\")\n                    else:\n                        res = hook_impl.function(*args)\n                        if res is not None:\n                            results.append(res)\n                            if firstresult:  # halt further impl calls\n                                break\n            except BaseException as exc:\n                exception = exc\n        finally:\n            # Fast path - only new-style wrappers, no Result.\n            if only_new_style_wrappers:\n                if firstresult:  # first result hooks return a single value\n                    result = results[0] if results else None\n                else:\n                    result = results\n    \n                # run all wrapper post-yield blocks\n                for teardown in reversed(teardowns):\n                    try:\n                        if exception is not None:\n                            teardown.throw(exception)  # type: ignore[union-attr]\n                        else:\n                            teardown.send(result)  # type: ignore[union-attr]\n                        # Following is unreachable for a well behaved hook wrapper.\n                        # Try to force finalizers otherwise postponed till GC action.\n                        # Note: close() may raise if generator handles GeneratorExit.\n                        teardown.close()  # type: ignore[union-attr]\n                    except StopIteration as si:\n                        result = si.value\n                        exception = None\n                        continue\n                    except BaseException as e:\n                        exception = e\n                        continue\n                    _raise_wrapfail(teardown, \"has second yield\")  # type: ignore[arg-type]\n    \n                if exception is not None:\n                    raise exception.with_traceback(exception.__traceback__)\n                else:\n                    return result\n    \n            # Slow path - need to support old-style wrappers.\n            else:\n                if firstresult:  # first result hooks return a single value\n                    outcome: Result[object | list[object]] = Result(\n                        results[0] if results else None, exception\n                    )\n                else:\n                    outcome = Result(results, exception)\n    \n                # run all wrapper post-yield blocks\n                for teardown in reversed(teardowns):\n                    if isinstance(teardown, tuple):\n                        try:\n                            teardown[0].send(outcome)\n                        except StopIteration:\n                            pass\n                        except BaseException as e:\n                            _warn_teardown_exception(hook_name, teardown[1], e)\n                            raise\n                        else:\n                            _raise_wrapfail(teardown[0], \"has second yield\")\n                    else:\n                        try:\n                            if outcome._exception is not None:\n>                               teardown.throw(outcome._exception)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_callers.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CaptureManager _method='tee-sys' _global_capturing=<MultiCapture out=<SysCapture stdout _old=<_io.TextIOWrapper name=...ended' tmpfile=<TeeCaptureIO encoding='UTF-8'>> in_=None _state='suspended' _in_suspended=False> _capture_fixture=None>\nitem = <Function test_b2b_page_add_request_success>\n\n    @hookimpl(wrapper=True)\n    def pytest_runtest_call(self, item: Item) -> Generator[None]:\n        with self.item_capture(\"call\", item):\n>           return (yield)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/capture.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhook_name = 'pytest_runtest_call'\nhook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/pyth...tion' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/unraisableexception.py'>>, ...]\ncaller_kwargs = {'item': <Function test_b2b_page_add_request_success>}\nfirstresult = False\n\n    def _multicall(\n        hook_name: str,\n        hook_impls: Sequence[HookImpl],\n        caller_kwargs: Mapping[str, object],\n        firstresult: bool,\n    ) -> object | list[object]:\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results: list[object] = []\n        exception = None\n        only_new_style_wrappers = True\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns: list[Teardown] = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        only_new_style_wrappers = False\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            wrapper_gen = cast(Generator[None, Result[object], None], res)\n                            next(wrapper_gen)  # first yield\n                            teardowns.append((wrapper_gen, hook_impl))\n                        except StopIteration:\n                            _raise_wrapfail(wrapper_gen, \"did not yield\")\n                    elif hook_impl.wrapper:\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            function_gen = cast(Generator[None, object, object], res)\n                            next(function_gen)  # first yield\n                            teardowns.append(function_gen)\n                        except StopIteration:\n                            _raise_wrapfail(function_gen, \"did not yield\")\n                    else:\n                        res = hook_impl.function(*args)\n                        if res is not None:\n                            results.append(res)\n                            if firstresult:  # halt further impl calls\n                                break\n            except BaseException as exc:\n                exception = exc\n        finally:\n            # Fast path - only new-style wrappers, no Result.\n            if only_new_style_wrappers:\n                if firstresult:  # first result hooks return a single value\n                    result = results[0] if results else None\n                else:\n                    result = results\n    \n                # run all wrapper post-yield blocks\n                for teardown in reversed(teardowns):\n                    try:\n                        if exception is not None:\n                            teardown.throw(exception)  # type: ignore[union-attr]\n                        else:\n                            teardown.send(result)  # type: ignore[union-attr]\n                        # Following is unreachable for a well behaved hook wrapper.\n                        # Try to force finalizers otherwise postponed till GC action.\n                        # Note: close() may raise if generator handles GeneratorExit.\n                        teardown.close()  # type: ignore[union-attr]\n                    except StopIteration as si:\n                        result = si.value\n                        exception = None\n                        continue\n                    except BaseException as e:\n                        exception = e\n                        continue\n                    _raise_wrapfail(teardown, \"has second yield\")  # type: ignore[arg-type]\n    \n                if exception is not None:\n                    raise exception.with_traceback(exception.__traceback__)\n                else:\n                    return result\n    \n            # Slow path - need to support old-style wrappers.\n            else:\n                if firstresult:  # first result hooks return a single value\n                    outcome: Result[object | list[object]] = Result(\n                        results[0] if results else None, exception\n                    )\n                else:\n                    outcome = Result(results, exception)\n    \n                # run all wrapper post-yield blocks\n                for teardown in reversed(teardowns):\n                    if isinstance(teardown, tuple):\n                        try:\n                            teardown[0].send(outcome)\n                        except StopIteration:\n                            pass\n                        except BaseException as e:\n                            _warn_teardown_exception(hook_name, teardown[1], e)\n                            raise\n                        else:\n                            _raise_wrapfail(teardown[0], \"has second yield\")\n                    else:\n                        try:\n                            if outcome._exception is not None:\n>                               teardown.throw(outcome._exception)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_callers.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nitem = <Function test_b2b_page_add_request_success>\n\n    @hookimpl(wrapper=True)\n    def pytest_runtest_call(item: Item) -> Generator[None]:\n        xfailed = item.stash.get(xfailed_key, None)\n        if xfailed is None:\n            item.stash[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n    \n        if xfailed and not item.config.option.runxfail and not xfailed.run:\n            xfail(\"[NOTRUN] \" + xfailed.reason)\n    \n        try:\n>           return (yield)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/skipping.py:257: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhook_name = 'pytest_runtest_call'\nhook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/pyth...tion' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/unraisableexception.py'>>, ...]\ncaller_kwargs = {'item': <Function test_b2b_page_add_request_success>}\nfirstresult = False\n\n    def _multicall(\n        hook_name: str,\n        hook_impls: Sequence[HookImpl],\n        caller_kwargs: Mapping[str, object],\n        firstresult: bool,\n    ) -> object | list[object]:\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results: list[object] = []\n        exception = None\n        only_new_style_wrappers = True\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns: list[Teardown] = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        only_new_style_wrappers = False\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            wrapper_gen = cast(Generator[None, Result[object], None], res)\n                            next(wrapper_gen)  # first yield\n                            teardowns.append((wrapper_gen, hook_impl))\n                        except StopIteration:\n                            _raise_wrapfail(wrapper_gen, \"did not yield\")\n                    elif hook_impl.wrapper:\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            function_gen = cast(Generator[None, object, object], res)\n                            next(function_gen)  # first yield\n                            teardowns.append(function_gen)\n                        except StopIteration:\n                            _raise_wrapfail(function_gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_callers.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nitem = <Function test_b2b_page_add_request_success>\n\n    def pytest_runtest_call(item: Item) -> None:\n        _update_current_test_var(item, \"call\")\n        try:\n            del sys.last_type\n            del sys.last_value\n            del sys.last_traceback\n            if sys.version_info >= (3, 12, 0):\n                del sys.last_exc  # type:ignore[attr-defined]\n        except AttributeError:\n            pass\n        try:\n>           item.runtest()\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/runner.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Function test_b2b_page_add_request_success>\n\n    def runtest(self) -> None:\n        \"\"\"Execute the underlying test function.\"\"\"\n>       self.ihook.pytest_pyfunc_call(pyfuncitem=self)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/python.py:1627: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <HookCaller 'pytest_pyfunc_call'>\nkwargs = {'pyfuncitem': <Function test_b2b_page_add_request_success>}\nfirstresult = True\n\n    def __call__(self, **kwargs: object) -> Any:\n        \"\"\"Call the hook.\n    \n        Only accepts keyword arguments, which should match the hook\n        specification.\n    \n        Returns the result(s) of calling all registered plugins, see\n        :ref:`calling`.\n        \"\"\"\n        assert (\n            not self.is_historic()\n        ), \"Cannot directly call a historic hook - use call_historic instead.\"\n        self._verify_all_args_are_provided(kwargs)\n        firstresult = self.spec.opts.get(\"firstresult\", False) if self.spec else False\n        # Copy because plugins may register other plugins during iteration (#438).\n>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_hooks.py:513: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <_pytest.config.PytestPluginManager object at 0x7f543cddc2f0>\nhook_name = 'pytest_pyfunc_call'\nmethods = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/python.py'>>]\nkwargs = {'pyfuncitem': <Function test_b2b_page_add_request_success>}\nfirstresult = True\n\n    def _hookexec(\n        self,\n        hook_name: str,\n        methods: Sequence[HookImpl],\n        kwargs: Mapping[str, object],\n        firstresult: bool,\n    ) -> object | list[object]:\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_manager.py:120: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhook_name = 'pytest_pyfunc_call'\nhook_impls = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/python.py'>>]\ncaller_kwargs = {'pyfuncitem': <Function test_b2b_page_add_request_success>}\nfirstresult = True\n\n    def _multicall(\n        hook_name: str,\n        hook_impls: Sequence[HookImpl],\n        caller_kwargs: Mapping[str, object],\n        firstresult: bool,\n    ) -> object | list[object]:\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results: list[object] = []\n        exception = None\n        only_new_style_wrappers = True\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns: list[Teardown] = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        only_new_style_wrappers = False\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            wrapper_gen = cast(Generator[None, Result[object], None], res)\n                            next(wrapper_gen)  # first yield\n                            teardowns.append((wrapper_gen, hook_impl))\n                        except StopIteration:\n                            _raise_wrapfail(wrapper_gen, \"did not yield\")\n                    elif hook_impl.wrapper:\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            function_gen = cast(Generator[None, object, object], res)\n                            next(function_gen)  # first yield\n                            teardowns.append(function_gen)\n                        except StopIteration:\n                            _raise_wrapfail(function_gen, \"did not yield\")\n                    else:\n                        res = hook_impl.function(*args)\n                        if res is not None:\n                            results.append(res)\n                            if firstresult:  # halt further impl calls\n                                break\n            except BaseException as exc:\n                exception = exc\n        finally:\n            # Fast path - only new-style wrappers, no Result.\n            if only_new_style_wrappers:\n                if firstresult:  # first result hooks return a single value\n                    result = results[0] if results else None\n                else:\n                    result = results\n    \n                # run all wrapper post-yield blocks\n                for teardown in reversed(teardowns):\n                    try:\n                        if exception is not None:\n                            teardown.throw(exception)  # type: ignore[union-attr]\n                        else:\n                            teardown.send(result)  # type: ignore[union-attr]\n                        # Following is unreachable for a well behaved hook wrapper.\n                        # Try to force finalizers otherwise postponed till GC action.\n                        # Note: close() may raise if generator handles GeneratorExit.\n                        teardown.close()  # type: ignore[union-attr]\n                    except StopIteration as si:\n                        result = si.value\n                        exception = None\n                        continue\n                    except BaseException as e:\n                        exception = e\n                        continue\n                    _raise_wrapfail(teardown, \"has second yield\")  # type: ignore[arg-type]\n    \n                if exception is not None:\n>                   raise exception.with_traceback(exception.__traceback__)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_callers.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhook_name = 'pytest_pyfunc_call'\nhook_impls = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/python.py'>>]\ncaller_kwargs = {'pyfuncitem': <Function test_b2b_page_add_request_success>}\nfirstresult = True\n\n    def _multicall(\n        hook_name: str,\n        hook_impls: Sequence[HookImpl],\n        caller_kwargs: Mapping[str, object],\n        firstresult: bool,\n    ) -> object | list[object]:\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results: list[object] = []\n        exception = None\n        only_new_style_wrappers = True\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns: list[Teardown] = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        only_new_style_wrappers = False\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            wrapper_gen = cast(Generator[None, Result[object], None], res)\n                            next(wrapper_gen)  # first yield\n                            teardowns.append((wrapper_gen, hook_impl))\n                        except StopIteration:\n                            _raise_wrapfail(wrapper_gen, \"did not yield\")\n                    elif hook_impl.wrapper:\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            function_gen = cast(Generator[None, object, object], res)\n                            next(function_gen)  # first yield\n                            teardowns.append(function_gen)\n                        except StopIteration:\n                            _raise_wrapfail(function_gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_callers.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npyfuncitem = <Function test_b2b_page_add_request_success>\n\n    @hookimpl(trylast=True)\n    def pytest_pyfunc_call(pyfuncitem: Function) -> object | None:\n        testfunction = pyfuncitem.obj\n        if is_async_function(testfunction):\n            async_warn_and_skip(pyfuncitem.nodeid)\n        funcargs = pyfuncitem.funcargs\n        testargs = {arg: funcargs[arg] for arg in pyfuncitem._fixtureinfo.argnames}\n>       result = testfunction(**testargs)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/python.py:159: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"79dd6a62b577565866d24562bb840250\")>\n\n    @allure.feature('Успешная отправка заявки')\n    def test_b2b_page_add_request_success(driver):\n        cms_page_test = CMSPage(driver)\n        cms_page_test.open()\n>       cms_page_test.click_button_banner()\n\ntest/test_cms_page.py:79: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.cms_page.CMSPage object at 0x7f5439f0bcb0>\n\n    def click_button_banner(self):\n        click_button_banner = self.driver.find_element(*Locators.button_banner_page)\n>       click_button_banner.click()\n\npages/cms_page.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"79dd6a62b577565866d24562bb840250\", element=\"f.2D0FBA87B0B5FD5986B2D52C28EA5F95.d.FF3EA40778EFE92210BABC98DA932C1B.e.6\")>\n\n    def click(self) -> None:\n        \"\"\"Clicks the element.\n    \n        Example:\n        --------\n        >>> element = driver.find_element(By.ID, 'foo')\n        >>> element.click()\n        \"\"\"\n>       self._execute(Command.CLICK_ELEMENT)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"79dd6a62b577565866d24562bb840250\", element=\"f.2D0FBA87B0B5FD5986B2D52C28EA5F95.d.FF3EA40778EFE92210BABC98DA932C1B.e.6\")>\ncommand = 'clickElement'\nparams = {'id': 'f.2D0FBA87B0B5FD5986B2D52C28EA5F95.d.FF3EA40778EFE92210BABC98DA932C1B.e.6'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Parameters:\n        ----------\n        command : any\n            The name of the command to _execute as a string.\n    \n        params : dict\n            A dictionary of named Parameters to send with the command.\n    \n        Returns:\n        -------\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params[\"id\"] = self._id\n>       return self._parent.execute(command, params)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:572: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"79dd6a62b577565866d24562bb840250\")>\ndriver_command = 'clickElement', params = {}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        Parameters:\n        ----------\n        driver_command : str\n            - The name of the command to execute as a string.\n    \n        params : dict\n            - A dictionary of named Parameters to send with the command.\n    \n        Returns:\n        --------\n          dict - The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5439f22200>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x5584cafe9e76 \\\\u003Cunknown>\\\\n#22 0x7f5c74a9caa4 \\\\u003Cunknown>\\\\n#23 0x7f5c74b29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"banner-button button open-modal\">...</button> is not clickable at point (893, 65). Other element would receive the click: <div class=\"menu-wrapper\">...</div>\nE         (Session info: chrome=134.0.6998.165)\nE       Stacktrace:\nE       #0 0x5584cafeaffa <unknown>\nE       #1 0x5584caaa9970 <unknown>\nE       #2 0x5584cab021ec <unknown>\nE       #3 0x5584cab00055 <unknown>\nE       #4 0x5584caafd6f2 <unknown>\nE       #5 0x5584caafc8ca <unknown>\nE       #6 0x5584caaef8cd <unknown>\nE       #7 0x5584cab21292 <unknown>\nE       #8 0x5584caaeee4a <unknown>\nE       #9 0x5584cab2145e <unknown>\nE       #10 0x5584cab4770c <unknown>\nE       #11 0x5584cab21063 <unknown>\nE       #12 0x5584caaed328 <unknown>\nE       #13 0x5584caaee491 <unknown>\nE       #14 0x5584cafb242b <unknown>\nE       #15 0x5584cafb62ec <unknown>\nE       #16 0x5584caf99a22 <unknown>\nE       #17 0x5584cafb6e64 <unknown>\nE       #18 0x5584caf7dbef <unknown>\nE       #19 0x5584cafd9558 <unknown>\nE       #20 0x5584cafd9736 <unknown>\nE       #21 0x5584cafe9e76 <unknown>\nE       #22 0x7f5c74a9caa4 <unknown>\nE       #23 0x7f5c74b29c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1743158479542,"stop":1743158479543,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver","time":{"start":1743158542426,"stop":1743158542740,"duration":314},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"banner-button button open-modal\">...</button> is not clickable at point (893, 65). Other element would receive the click: <div class=\"menu-wrapper\">...</div>\n  (Session info: chrome=134.0.6998.165)\nStacktrace:\n#0 0x5584cafeaffa <unknown>\n#1 0x5584caaa9970 <unknown>\n#2 0x5584cab021ec <unknown>\n#3 0x5584cab00055 <unknown>\n#4 0x5584caafd6f2 <unknown>\n#5 0x5584caafc8ca <unknown>\n#6 0x5584caaef8cd <unknown>\n#7 0x5584cab21292 <unknown>\n#8 0x5584caaeee4a <unknown>\n#9 0x5584cab2145e <unknown>\n#10 0x5584cab4770c <unknown>\n#11 0x5584cab21063 <unknown>\n#12 0x5584caaed328 <unknown>\n#13 0x5584caaee491 <unknown>\n#14 0x5584cafb242b <unknown>\n#15 0x5584cafb62ec <unknown>\n#16 0x5584caf99a22 <unknown>\n#17 0x5584cafb6e64 <unknown>\n#18 0x5584caf7dbef <unknown>\n#19 0x5584cafd9558 <unknown>\n#20 0x5584cafd9736 <unknown>\n#21 0x5584cafe9e76 <unknown>\n#22 0x7f5c74a9caa4 <unknown>\n#23 0x7f5c74b29c3c <unknown>","statusTrace":"cls = <class '_pytest.runner.CallInfo'>\nfunc = <function call_and_report.<locals>.<lambda> at 0x7f5439ee0360>\nwhen = 'call'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(\n        cls,\n        func: Callable[[], TResult],\n        when: Literal[\"collect\", \"setup\", \"call\", \"teardown\"],\n        reraise: type[BaseException] | tuple[type[BaseException], ...] | None = None,\n    ) -> CallInfo[TResult]:\n        \"\"\"Call func, wrapping the result in a CallInfo.\n    \n        :param func:\n            The function to call. Called without arguments.\n        :type func: Callable[[], _pytest.runner.TResult]\n        :param when:\n            The phase in which the function is called.\n        :param reraise:\n            Exception or exceptions that shall propagate if raised by the\n            function, instead of being wrapped in the CallInfo.\n        \"\"\"\n        excinfo = None\n        start = timing.time()\n        precise_start = timing.perf_counter()\n        try:\n>           result: TResult | None = func()\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/runner.py:341: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n>       lambda: runtest_hook(item=item, **kwds), when=when, reraise=reraise\n    )\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/runner.py:242: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <HookCaller 'pytest_runtest_call'>\nkwargs = {'item': <Function test_b2b_page_add_request_success>}\nfirstresult = False\n\n    def __call__(self, **kwargs: object) -> Any:\n        \"\"\"Call the hook.\n    \n        Only accepts keyword arguments, which should match the hook\n        specification.\n    \n        Returns the result(s) of calling all registered plugins, see\n        :ref:`calling`.\n        \"\"\"\n        assert (\n            not self.is_historic()\n        ), \"Cannot directly call a historic hook - use call_historic instead.\"\n        self._verify_all_args_are_provided(kwargs)\n        firstresult = self.spec.opts.get(\"firstresult\", False) if self.spec else False\n        # Copy because plugins may register other plugins during iteration (#438).\n>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_hooks.py:513: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <_pytest.config.PytestPluginManager object at 0x7f543cddc2f0>\nhook_name = 'pytest_runtest_call'\nmethods = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/pyth...tion' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/unraisableexception.py'>>, ...]\nkwargs = {'item': <Function test_b2b_page_add_request_success>}\nfirstresult = False\n\n    def _hookexec(\n        self,\n        hook_name: str,\n        methods: Sequence[HookImpl],\n        kwargs: Mapping[str, object],\n        firstresult: bool,\n    ) -> object | list[object]:\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_manager.py:120: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhook_name = 'pytest_runtest_call'\nhook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/pyth...tion' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/unraisableexception.py'>>, ...]\ncaller_kwargs = {'item': <Function test_b2b_page_add_request_success>}\nfirstresult = False\n\n    def _multicall(\n        hook_name: str,\n        hook_impls: Sequence[HookImpl],\n        caller_kwargs: Mapping[str, object],\n        firstresult: bool,\n    ) -> object | list[object]:\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results: list[object] = []\n        exception = None\n        only_new_style_wrappers = True\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns: list[Teardown] = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        only_new_style_wrappers = False\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            wrapper_gen = cast(Generator[None, Result[object], None], res)\n                            next(wrapper_gen)  # first yield\n                            teardowns.append((wrapper_gen, hook_impl))\n                        except StopIteration:\n                            _raise_wrapfail(wrapper_gen, \"did not yield\")\n                    elif hook_impl.wrapper:\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            function_gen = cast(Generator[None, object, object], res)\n                            next(function_gen)  # first yield\n                            teardowns.append(function_gen)\n                        except StopIteration:\n                            _raise_wrapfail(function_gen, \"did not yield\")\n                    else:\n                        res = hook_impl.function(*args)\n                        if res is not None:\n                            results.append(res)\n                            if firstresult:  # halt further impl calls\n                                break\n            except BaseException as exc:\n                exception = exc\n        finally:\n            # Fast path - only new-style wrappers, no Result.\n            if only_new_style_wrappers:\n                if firstresult:  # first result hooks return a single value\n                    result = results[0] if results else None\n                else:\n                    result = results\n    \n                # run all wrapper post-yield blocks\n                for teardown in reversed(teardowns):\n                    try:\n                        if exception is not None:\n                            teardown.throw(exception)  # type: ignore[union-attr]\n                        else:\n                            teardown.send(result)  # type: ignore[union-attr]\n                        # Following is unreachable for a well behaved hook wrapper.\n                        # Try to force finalizers otherwise postponed till GC action.\n                        # Note: close() may raise if generator handles GeneratorExit.\n                        teardown.close()  # type: ignore[union-attr]\n                    except StopIteration as si:\n                        result = si.value\n                        exception = None\n                        continue\n                    except BaseException as e:\n                        exception = e\n                        continue\n                    _raise_wrapfail(teardown, \"has second yield\")  # type: ignore[arg-type]\n    \n                if exception is not None:\n                    raise exception.with_traceback(exception.__traceback__)\n                else:\n                    return result\n    \n            # Slow path - need to support old-style wrappers.\n            else:\n                if firstresult:  # first result hooks return a single value\n                    outcome: Result[object | list[object]] = Result(\n                        results[0] if results else None, exception\n                    )\n                else:\n                    outcome = Result(results, exception)\n    \n                # run all wrapper post-yield blocks\n                for teardown in reversed(teardowns):\n                    if isinstance(teardown, tuple):\n                        try:\n                            teardown[0].send(outcome)\n                        except StopIteration:\n                            pass\n                        except BaseException as e:\n                            _warn_teardown_exception(hook_name, teardown[1], e)\n                            raise\n                        else:\n                            _raise_wrapfail(teardown[0], \"has second yield\")\n                    else:\n                        try:\n                            if outcome._exception is not None:\n                                teardown.throw(outcome._exception)\n                            else:\n                                teardown.send(outcome._result)\n                            # Following is unreachable for a well behaved hook wrapper.\n                            # Try to force finalizers otherwise postponed till GC action.\n                            # Note: close() may raise if generator handles GeneratorExit.\n                            teardown.close()\n                        except StopIteration as si:\n                            outcome.force_result(si.value)\n                            continue\n                        except BaseException as e:\n                            outcome.force_exception(e)\n                            continue\n                        _raise_wrapfail(teardown, \"has second yield\")\n    \n>               return outcome.get_result()\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_callers.py:182: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pluggy._result.Result object at 0x7f543b896d70>\n\n    def get_result(self) -> ResultType:\n        \"\"\"Get the result(s) for this hook call.\n    \n        If the hook was marked as a ``firstresult`` only a single value\n        will be returned, otherwise a list of results.\n        \"\"\"\n        __tracebackhide__ = True\n        exc = self._exception\n        if exc is None:\n            return cast(ResultType, self._result)\n        else:\n>           raise exc.with_traceback(exc.__traceback__)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_result.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhook_name = 'pytest_runtest_call'\nhook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/pyth...tion' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/unraisableexception.py'>>, ...]\ncaller_kwargs = {'item': <Function test_b2b_page_add_request_success>}\nfirstresult = False\n\n    def _multicall(\n        hook_name: str,\n        hook_impls: Sequence[HookImpl],\n        caller_kwargs: Mapping[str, object],\n        firstresult: bool,\n    ) -> object | list[object]:\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results: list[object] = []\n        exception = None\n        only_new_style_wrappers = True\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns: list[Teardown] = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        only_new_style_wrappers = False\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            wrapper_gen = cast(Generator[None, Result[object], None], res)\n                            next(wrapper_gen)  # first yield\n                            teardowns.append((wrapper_gen, hook_impl))\n                        except StopIteration:\n                            _raise_wrapfail(wrapper_gen, \"did not yield\")\n                    elif hook_impl.wrapper:\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            function_gen = cast(Generator[None, object, object], res)\n                            next(function_gen)  # first yield\n                            teardowns.append(function_gen)\n                        except StopIteration:\n                            _raise_wrapfail(function_gen, \"did not yield\")\n                    else:\n                        res = hook_impl.function(*args)\n                        if res is not None:\n                            results.append(res)\n                            if firstresult:  # halt further impl calls\n                                break\n            except BaseException as exc:\n                exception = exc\n        finally:\n            # Fast path - only new-style wrappers, no Result.\n            if only_new_style_wrappers:\n                if firstresult:  # first result hooks return a single value\n                    result = results[0] if results else None\n                else:\n                    result = results\n    \n                # run all wrapper post-yield blocks\n                for teardown in reversed(teardowns):\n                    try:\n                        if exception is not None:\n                            teardown.throw(exception)  # type: ignore[union-attr]\n                        else:\n                            teardown.send(result)  # type: ignore[union-attr]\n                        # Following is unreachable for a well behaved hook wrapper.\n                        # Try to force finalizers otherwise postponed till GC action.\n                        # Note: close() may raise if generator handles GeneratorExit.\n                        teardown.close()  # type: ignore[union-attr]\n                    except StopIteration as si:\n                        result = si.value\n                        exception = None\n                        continue\n                    except BaseException as e:\n                        exception = e\n                        continue\n                    _raise_wrapfail(teardown, \"has second yield\")  # type: ignore[arg-type]\n    \n                if exception is not None:\n                    raise exception.with_traceback(exception.__traceback__)\n                else:\n                    return result\n    \n            # Slow path - need to support old-style wrappers.\n            else:\n                if firstresult:  # first result hooks return a single value\n                    outcome: Result[object | list[object]] = Result(\n                        results[0] if results else None, exception\n                    )\n                else:\n                    outcome = Result(results, exception)\n    \n                # run all wrapper post-yield blocks\n                for teardown in reversed(teardowns):\n                    if isinstance(teardown, tuple):\n                        try:\n                            teardown[0].send(outcome)\n                        except StopIteration:\n                            pass\n                        except BaseException as e:\n                            _warn_teardown_exception(hook_name, teardown[1], e)\n                            raise\n                        else:\n                            _raise_wrapfail(teardown[0], \"has second yield\")\n                    else:\n                        try:\n                            if outcome._exception is not None:\n>                               teardown.throw(outcome._exception)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_callers.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @pytest.hookimpl(wrapper=True, tryfirst=True)\n    def pytest_runtest_call() -> Generator[None]:\n>       yield from thread_exception_runtest_hook()\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/threadexception.py:92: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def thread_exception_runtest_hook() -> Generator[None]:\n        with catch_threading_exception() as cm:\n            try:\n>               yield\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/threadexception.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhook_name = 'pytest_runtest_call'\nhook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/pyth...tion' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/unraisableexception.py'>>, ...]\ncaller_kwargs = {'item': <Function test_b2b_page_add_request_success>}\nfirstresult = False\n\n    def _multicall(\n        hook_name: str,\n        hook_impls: Sequence[HookImpl],\n        caller_kwargs: Mapping[str, object],\n        firstresult: bool,\n    ) -> object | list[object]:\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results: list[object] = []\n        exception = None\n        only_new_style_wrappers = True\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns: list[Teardown] = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        only_new_style_wrappers = False\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            wrapper_gen = cast(Generator[None, Result[object], None], res)\n                            next(wrapper_gen)  # first yield\n                            teardowns.append((wrapper_gen, hook_impl))\n                        except StopIteration:\n                            _raise_wrapfail(wrapper_gen, \"did not yield\")\n                    elif hook_impl.wrapper:\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            function_gen = cast(Generator[None, object, object], res)\n                            next(function_gen)  # first yield\n                            teardowns.append(function_gen)\n                        except StopIteration:\n                            _raise_wrapfail(function_gen, \"did not yield\")\n                    else:\n                        res = hook_impl.function(*args)\n                        if res is not None:\n                            results.append(res)\n                            if firstresult:  # halt further impl calls\n                                break\n            except BaseException as exc:\n                exception = exc\n        finally:\n            # Fast path - only new-style wrappers, no Result.\n            if only_new_style_wrappers:\n                if firstresult:  # first result hooks return a single value\n                    result = results[0] if results else None\n                else:\n                    result = results\n    \n                # run all wrapper post-yield blocks\n                for teardown in reversed(teardowns):\n                    try:\n                        if exception is not None:\n                            teardown.throw(exception)  # type: ignore[union-attr]\n                        else:\n                            teardown.send(result)  # type: ignore[union-attr]\n                        # Following is unreachable for a well behaved hook wrapper.\n                        # Try to force finalizers otherwise postponed till GC action.\n                        # Note: close() may raise if generator handles GeneratorExit.\n                        teardown.close()  # type: ignore[union-attr]\n                    except StopIteration as si:\n                        result = si.value\n                        exception = None\n                        continue\n                    except BaseException as e:\n                        exception = e\n                        continue\n                    _raise_wrapfail(teardown, \"has second yield\")  # type: ignore[arg-type]\n    \n                if exception is not None:\n                    raise exception.with_traceback(exception.__traceback__)\n                else:\n                    return result\n    \n            # Slow path - need to support old-style wrappers.\n            else:\n                if firstresult:  # first result hooks return a single value\n                    outcome: Result[object | list[object]] = Result(\n                        results[0] if results else None, exception\n                    )\n                else:\n                    outcome = Result(results, exception)\n    \n                # run all wrapper post-yield blocks\n                for teardown in reversed(teardowns):\n                    if isinstance(teardown, tuple):\n                        try:\n                            teardown[0].send(outcome)\n                        except StopIteration:\n                            pass\n                        except BaseException as e:\n                            _warn_teardown_exception(hook_name, teardown[1], e)\n                            raise\n                        else:\n                            _raise_wrapfail(teardown[0], \"has second yield\")\n                    else:\n                        try:\n                            if outcome._exception is not None:\n>                               teardown.throw(outcome._exception)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_callers.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    @pytest.hookimpl(wrapper=True, tryfirst=True)\n    def pytest_runtest_call() -> Generator[None]:\n>       yield from unraisable_exception_runtest_hook()\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/unraisableexception.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def unraisable_exception_runtest_hook() -> Generator[None]:\n        with catch_unraisable_exception() as cm:\n            try:\n>               yield\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/unraisableexception.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhook_name = 'pytest_runtest_call'\nhook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/pyth...tion' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/unraisableexception.py'>>, ...]\ncaller_kwargs = {'item': <Function test_b2b_page_add_request_success>}\nfirstresult = False\n\n    def _multicall(\n        hook_name: str,\n        hook_impls: Sequence[HookImpl],\n        caller_kwargs: Mapping[str, object],\n        firstresult: bool,\n    ) -> object | list[object]:\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results: list[object] = []\n        exception = None\n        only_new_style_wrappers = True\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns: list[Teardown] = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        only_new_style_wrappers = False\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            wrapper_gen = cast(Generator[None, Result[object], None], res)\n                            next(wrapper_gen)  # first yield\n                            teardowns.append((wrapper_gen, hook_impl))\n                        except StopIteration:\n                            _raise_wrapfail(wrapper_gen, \"did not yield\")\n                    elif hook_impl.wrapper:\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            function_gen = cast(Generator[None, object, object], res)\n                            next(function_gen)  # first yield\n                            teardowns.append(function_gen)\n                        except StopIteration:\n                            _raise_wrapfail(function_gen, \"did not yield\")\n                    else:\n                        res = hook_impl.function(*args)\n                        if res is not None:\n                            results.append(res)\n                            if firstresult:  # halt further impl calls\n                                break\n            except BaseException as exc:\n                exception = exc\n        finally:\n            # Fast path - only new-style wrappers, no Result.\n            if only_new_style_wrappers:\n                if firstresult:  # first result hooks return a single value\n                    result = results[0] if results else None\n                else:\n                    result = results\n    \n                # run all wrapper post-yield blocks\n                for teardown in reversed(teardowns):\n                    try:\n                        if exception is not None:\n                            teardown.throw(exception)  # type: ignore[union-attr]\n                        else:\n                            teardown.send(result)  # type: ignore[union-attr]\n                        # Following is unreachable for a well behaved hook wrapper.\n                        # Try to force finalizers otherwise postponed till GC action.\n                        # Note: close() may raise if generator handles GeneratorExit.\n                        teardown.close()  # type: ignore[union-attr]\n                    except StopIteration as si:\n                        result = si.value\n                        exception = None\n                        continue\n                    except BaseException as e:\n                        exception = e\n                        continue\n                    _raise_wrapfail(teardown, \"has second yield\")  # type: ignore[arg-type]\n    \n                if exception is not None:\n                    raise exception.with_traceback(exception.__traceback__)\n                else:\n                    return result\n    \n            # Slow path - need to support old-style wrappers.\n            else:\n                if firstresult:  # first result hooks return a single value\n                    outcome: Result[object | list[object]] = Result(\n                        results[0] if results else None, exception\n                    )\n                else:\n                    outcome = Result(results, exception)\n    \n                # run all wrapper post-yield blocks\n                for teardown in reversed(teardowns):\n                    if isinstance(teardown, tuple):\n                        try:\n                            teardown[0].send(outcome)\n                        except StopIteration:\n                            pass\n                        except BaseException as e:\n                            _warn_teardown_exception(hook_name, teardown[1], e)\n                            raise\n                        else:\n                            _raise_wrapfail(teardown[0], \"has second yield\")\n                    else:\n                        try:\n                            if outcome._exception is not None:\n>                               teardown.throw(outcome._exception)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_callers.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <_pytest.logging.LoggingPlugin object at 0x7f543bcc5400>\nitem = <Function test_b2b_page_add_request_success>\n\n    @hookimpl(wrapper=True)\n    def pytest_runtest_call(self, item: nodes.Item) -> Generator[None]:\n        self.log_cli_handler.set_when(\"call\")\n    \n>       yield from self._runtest_for(item, \"call\")\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/logging.py:846: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <_pytest.logging.LoggingPlugin object at 0x7f543bcc5400>\nitem = <Function test_b2b_page_add_request_success>, when = 'call'\n\n    def _runtest_for(self, item: nodes.Item, when: str) -> Generator[None]:\n        \"\"\"Implement the internals of the pytest_runtest_xxx() hooks.\"\"\"\n        with catching_logs(\n            self.caplog_handler,\n            level=self.log_level,\n        ) as caplog_handler, catching_logs(\n            self.report_handler,\n            level=self.log_level,\n        ) as report_handler:\n            caplog_handler.reset()\n            report_handler.reset()\n            item.stash[caplog_records_key][when] = caplog_handler.records\n            item.stash[caplog_handler_key] = caplog_handler\n    \n            try:\n>               yield\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/logging.py:829: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhook_name = 'pytest_runtest_call'\nhook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/pyth...tion' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/unraisableexception.py'>>, ...]\ncaller_kwargs = {'item': <Function test_b2b_page_add_request_success>}\nfirstresult = False\n\n    def _multicall(\n        hook_name: str,\n        hook_impls: Sequence[HookImpl],\n        caller_kwargs: Mapping[str, object],\n        firstresult: bool,\n    ) -> object | list[object]:\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results: list[object] = []\n        exception = None\n        only_new_style_wrappers = True\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns: list[Teardown] = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        only_new_style_wrappers = False\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            wrapper_gen = cast(Generator[None, Result[object], None], res)\n                            next(wrapper_gen)  # first yield\n                            teardowns.append((wrapper_gen, hook_impl))\n                        except StopIteration:\n                            _raise_wrapfail(wrapper_gen, \"did not yield\")\n                    elif hook_impl.wrapper:\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            function_gen = cast(Generator[None, object, object], res)\n                            next(function_gen)  # first yield\n                            teardowns.append(function_gen)\n                        except StopIteration:\n                            _raise_wrapfail(function_gen, \"did not yield\")\n                    else:\n                        res = hook_impl.function(*args)\n                        if res is not None:\n                            results.append(res)\n                            if firstresult:  # halt further impl calls\n                                break\n            except BaseException as exc:\n                exception = exc\n        finally:\n            # Fast path - only new-style wrappers, no Result.\n            if only_new_style_wrappers:\n                if firstresult:  # first result hooks return a single value\n                    result = results[0] if results else None\n                else:\n                    result = results\n    \n                # run all wrapper post-yield blocks\n                for teardown in reversed(teardowns):\n                    try:\n                        if exception is not None:\n                            teardown.throw(exception)  # type: ignore[union-attr]\n                        else:\n                            teardown.send(result)  # type: ignore[union-attr]\n                        # Following is unreachable for a well behaved hook wrapper.\n                        # Try to force finalizers otherwise postponed till GC action.\n                        # Note: close() may raise if generator handles GeneratorExit.\n                        teardown.close()  # type: ignore[union-attr]\n                    except StopIteration as si:\n                        result = si.value\n                        exception = None\n                        continue\n                    except BaseException as e:\n                        exception = e\n                        continue\n                    _raise_wrapfail(teardown, \"has second yield\")  # type: ignore[arg-type]\n    \n                if exception is not None:\n                    raise exception.with_traceback(exception.__traceback__)\n                else:\n                    return result\n    \n            # Slow path - need to support old-style wrappers.\n            else:\n                if firstresult:  # first result hooks return a single value\n                    outcome: Result[object | list[object]] = Result(\n                        results[0] if results else None, exception\n                    )\n                else:\n                    outcome = Result(results, exception)\n    \n                # run all wrapper post-yield blocks\n                for teardown in reversed(teardowns):\n                    if isinstance(teardown, tuple):\n                        try:\n                            teardown[0].send(outcome)\n                        except StopIteration:\n                            pass\n                        except BaseException as e:\n                            _warn_teardown_exception(hook_name, teardown[1], e)\n                            raise\n                        else:\n                            _raise_wrapfail(teardown[0], \"has second yield\")\n                    else:\n                        try:\n                            if outcome._exception is not None:\n>                               teardown.throw(outcome._exception)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_callers.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <CaptureManager _method='tee-sys' _global_capturing=<MultiCapture out=<SysCapture stdout _old=<_io.TextIOWrapper name=...ended' tmpfile=<TeeCaptureIO encoding='UTF-8'>> in_=None _state='suspended' _in_suspended=False> _capture_fixture=None>\nitem = <Function test_b2b_page_add_request_success>\n\n    @hookimpl(wrapper=True)\n    def pytest_runtest_call(self, item: Item) -> Generator[None]:\n        with self.item_capture(\"call\", item):\n>           return (yield)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/capture.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhook_name = 'pytest_runtest_call'\nhook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/pyth...tion' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/unraisableexception.py'>>, ...]\ncaller_kwargs = {'item': <Function test_b2b_page_add_request_success>}\nfirstresult = False\n\n    def _multicall(\n        hook_name: str,\n        hook_impls: Sequence[HookImpl],\n        caller_kwargs: Mapping[str, object],\n        firstresult: bool,\n    ) -> object | list[object]:\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results: list[object] = []\n        exception = None\n        only_new_style_wrappers = True\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns: list[Teardown] = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        only_new_style_wrappers = False\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            wrapper_gen = cast(Generator[None, Result[object], None], res)\n                            next(wrapper_gen)  # first yield\n                            teardowns.append((wrapper_gen, hook_impl))\n                        except StopIteration:\n                            _raise_wrapfail(wrapper_gen, \"did not yield\")\n                    elif hook_impl.wrapper:\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            function_gen = cast(Generator[None, object, object], res)\n                            next(function_gen)  # first yield\n                            teardowns.append(function_gen)\n                        except StopIteration:\n                            _raise_wrapfail(function_gen, \"did not yield\")\n                    else:\n                        res = hook_impl.function(*args)\n                        if res is not None:\n                            results.append(res)\n                            if firstresult:  # halt further impl calls\n                                break\n            except BaseException as exc:\n                exception = exc\n        finally:\n            # Fast path - only new-style wrappers, no Result.\n            if only_new_style_wrappers:\n                if firstresult:  # first result hooks return a single value\n                    result = results[0] if results else None\n                else:\n                    result = results\n    \n                # run all wrapper post-yield blocks\n                for teardown in reversed(teardowns):\n                    try:\n                        if exception is not None:\n                            teardown.throw(exception)  # type: ignore[union-attr]\n                        else:\n                            teardown.send(result)  # type: ignore[union-attr]\n                        # Following is unreachable for a well behaved hook wrapper.\n                        # Try to force finalizers otherwise postponed till GC action.\n                        # Note: close() may raise if generator handles GeneratorExit.\n                        teardown.close()  # type: ignore[union-attr]\n                    except StopIteration as si:\n                        result = si.value\n                        exception = None\n                        continue\n                    except BaseException as e:\n                        exception = e\n                        continue\n                    _raise_wrapfail(teardown, \"has second yield\")  # type: ignore[arg-type]\n    \n                if exception is not None:\n                    raise exception.with_traceback(exception.__traceback__)\n                else:\n                    return result\n    \n            # Slow path - need to support old-style wrappers.\n            else:\n                if firstresult:  # first result hooks return a single value\n                    outcome: Result[object | list[object]] = Result(\n                        results[0] if results else None, exception\n                    )\n                else:\n                    outcome = Result(results, exception)\n    \n                # run all wrapper post-yield blocks\n                for teardown in reversed(teardowns):\n                    if isinstance(teardown, tuple):\n                        try:\n                            teardown[0].send(outcome)\n                        except StopIteration:\n                            pass\n                        except BaseException as e:\n                            _warn_teardown_exception(hook_name, teardown[1], e)\n                            raise\n                        else:\n                            _raise_wrapfail(teardown[0], \"has second yield\")\n                    else:\n                        try:\n                            if outcome._exception is not None:\n>                               teardown.throw(outcome._exception)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_callers.py:167: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nitem = <Function test_b2b_page_add_request_success>\n\n    @hookimpl(wrapper=True)\n    def pytest_runtest_call(item: Item) -> Generator[None]:\n        xfailed = item.stash.get(xfailed_key, None)\n        if xfailed is None:\n            item.stash[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n    \n        if xfailed and not item.config.option.runxfail and not xfailed.run:\n            xfail(\"[NOTRUN] \" + xfailed.reason)\n    \n        try:\n>           return (yield)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/skipping.py:257: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhook_name = 'pytest_runtest_call'\nhook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/pyth...tion' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/unraisableexception.py'>>, ...]\ncaller_kwargs = {'item': <Function test_b2b_page_add_request_success>}\nfirstresult = False\n\n    def _multicall(\n        hook_name: str,\n        hook_impls: Sequence[HookImpl],\n        caller_kwargs: Mapping[str, object],\n        firstresult: bool,\n    ) -> object | list[object]:\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results: list[object] = []\n        exception = None\n        only_new_style_wrappers = True\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns: list[Teardown] = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        only_new_style_wrappers = False\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            wrapper_gen = cast(Generator[None, Result[object], None], res)\n                            next(wrapper_gen)  # first yield\n                            teardowns.append((wrapper_gen, hook_impl))\n                        except StopIteration:\n                            _raise_wrapfail(wrapper_gen, \"did not yield\")\n                    elif hook_impl.wrapper:\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            function_gen = cast(Generator[None, object, object], res)\n                            next(function_gen)  # first yield\n                            teardowns.append(function_gen)\n                        except StopIteration:\n                            _raise_wrapfail(function_gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_callers.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nitem = <Function test_b2b_page_add_request_success>\n\n    def pytest_runtest_call(item: Item) -> None:\n        _update_current_test_var(item, \"call\")\n        try:\n            del sys.last_type\n            del sys.last_value\n            del sys.last_traceback\n            if sys.version_info >= (3, 12, 0):\n                del sys.last_exc  # type:ignore[attr-defined]\n        except AttributeError:\n            pass\n        try:\n>           item.runtest()\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/runner.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Function test_b2b_page_add_request_success>\n\n    def runtest(self) -> None:\n        \"\"\"Execute the underlying test function.\"\"\"\n>       self.ihook.pytest_pyfunc_call(pyfuncitem=self)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/python.py:1627: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <HookCaller 'pytest_pyfunc_call'>\nkwargs = {'pyfuncitem': <Function test_b2b_page_add_request_success>}\nfirstresult = True\n\n    def __call__(self, **kwargs: object) -> Any:\n        \"\"\"Call the hook.\n    \n        Only accepts keyword arguments, which should match the hook\n        specification.\n    \n        Returns the result(s) of calling all registered plugins, see\n        :ref:`calling`.\n        \"\"\"\n        assert (\n            not self.is_historic()\n        ), \"Cannot directly call a historic hook - use call_historic instead.\"\n        self._verify_all_args_are_provided(kwargs)\n        firstresult = self.spec.opts.get(\"firstresult\", False) if self.spec else False\n        # Copy because plugins may register other plugins during iteration (#438).\n>       return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_hooks.py:513: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <_pytest.config.PytestPluginManager object at 0x7f543cddc2f0>\nhook_name = 'pytest_pyfunc_call'\nmethods = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/python.py'>>]\nkwargs = {'pyfuncitem': <Function test_b2b_page_add_request_success>}\nfirstresult = True\n\n    def _hookexec(\n        self,\n        hook_name: str,\n        methods: Sequence[HookImpl],\n        kwargs: Mapping[str, object],\n        firstresult: bool,\n    ) -> object | list[object]:\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_manager.py:120: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhook_name = 'pytest_pyfunc_call'\nhook_impls = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/python.py'>>]\ncaller_kwargs = {'pyfuncitem': <Function test_b2b_page_add_request_success>}\nfirstresult = True\n\n    def _multicall(\n        hook_name: str,\n        hook_impls: Sequence[HookImpl],\n        caller_kwargs: Mapping[str, object],\n        firstresult: bool,\n    ) -> object | list[object]:\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results: list[object] = []\n        exception = None\n        only_new_style_wrappers = True\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns: list[Teardown] = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        only_new_style_wrappers = False\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            wrapper_gen = cast(Generator[None, Result[object], None], res)\n                            next(wrapper_gen)  # first yield\n                            teardowns.append((wrapper_gen, hook_impl))\n                        except StopIteration:\n                            _raise_wrapfail(wrapper_gen, \"did not yield\")\n                    elif hook_impl.wrapper:\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            function_gen = cast(Generator[None, object, object], res)\n                            next(function_gen)  # first yield\n                            teardowns.append(function_gen)\n                        except StopIteration:\n                            _raise_wrapfail(function_gen, \"did not yield\")\n                    else:\n                        res = hook_impl.function(*args)\n                        if res is not None:\n                            results.append(res)\n                            if firstresult:  # halt further impl calls\n                                break\n            except BaseException as exc:\n                exception = exc\n        finally:\n            # Fast path - only new-style wrappers, no Result.\n            if only_new_style_wrappers:\n                if firstresult:  # first result hooks return a single value\n                    result = results[0] if results else None\n                else:\n                    result = results\n    \n                # run all wrapper post-yield blocks\n                for teardown in reversed(teardowns):\n                    try:\n                        if exception is not None:\n                            teardown.throw(exception)  # type: ignore[union-attr]\n                        else:\n                            teardown.send(result)  # type: ignore[union-attr]\n                        # Following is unreachable for a well behaved hook wrapper.\n                        # Try to force finalizers otherwise postponed till GC action.\n                        # Note: close() may raise if generator handles GeneratorExit.\n                        teardown.close()  # type: ignore[union-attr]\n                    except StopIteration as si:\n                        result = si.value\n                        exception = None\n                        continue\n                    except BaseException as e:\n                        exception = e\n                        continue\n                    _raise_wrapfail(teardown, \"has second yield\")  # type: ignore[arg-type]\n    \n                if exception is not None:\n>                   raise exception.with_traceback(exception.__traceback__)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_callers.py:139: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nhook_name = 'pytest_pyfunc_call'\nhook_impls = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/python.py'>>]\ncaller_kwargs = {'pyfuncitem': <Function test_b2b_page_add_request_success>}\nfirstresult = True\n\n    def _multicall(\n        hook_name: str,\n        hook_impls: Sequence[HookImpl],\n        caller_kwargs: Mapping[str, object],\n        firstresult: bool,\n    ) -> object | list[object]:\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results: list[object] = []\n        exception = None\n        only_new_style_wrappers = True\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns: list[Teardown] = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    f\"hook call must provide argument {argname!r}\"\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        only_new_style_wrappers = False\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            wrapper_gen = cast(Generator[None, Result[object], None], res)\n                            next(wrapper_gen)  # first yield\n                            teardowns.append((wrapper_gen, hook_impl))\n                        except StopIteration:\n                            _raise_wrapfail(wrapper_gen, \"did not yield\")\n                    elif hook_impl.wrapper:\n                        try:\n                            # If this cast is not valid, a type error is raised below,\n                            # which is the desired response.\n                            res = hook_impl.function(*args)\n                            function_gen = cast(Generator[None, object, object], res)\n                            next(function_gen)  # first yield\n                            teardowns.append(function_gen)\n                        except StopIteration:\n                            _raise_wrapfail(function_gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/pluggy/_callers.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npyfuncitem = <Function test_b2b_page_add_request_success>\n\n    @hookimpl(trylast=True)\n    def pytest_pyfunc_call(pyfuncitem: Function) -> object | None:\n        testfunction = pyfuncitem.obj\n        if is_async_function(testfunction):\n            async_warn_and_skip(pyfuncitem.nodeid)\n        funcargs = pyfuncitem.funcargs\n        testargs = {arg: funcargs[arg] for arg in pyfuncitem._fixtureinfo.argnames}\n>       result = testfunction(**testargs)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/_pytest/python.py:159: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"79dd6a62b577565866d24562bb840250\")>\n\n    @allure.feature('Успешная отправка заявки')\n    def test_b2b_page_add_request_success(driver):\n        cms_page_test = CMSPage(driver)\n        cms_page_test.open()\n>       cms_page_test.click_button_banner()\n\ntest/test_cms_page.py:79: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.cms_page.CMSPage object at 0x7f5439f0bcb0>\n\n    def click_button_banner(self):\n        click_button_banner = self.driver.find_element(*Locators.button_banner_page)\n>       click_button_banner.click()\n\npages/cms_page.py:38: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"79dd6a62b577565866d24562bb840250\", element=\"f.2D0FBA87B0B5FD5986B2D52C28EA5F95.d.FF3EA40778EFE92210BABC98DA932C1B.e.6\")>\n\n    def click(self) -> None:\n        \"\"\"Clicks the element.\n    \n        Example:\n        --------\n        >>> element = driver.find_element(By.ID, 'foo')\n        >>> element.click()\n        \"\"\"\n>       self._execute(Command.CLICK_ELEMENT)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"79dd6a62b577565866d24562bb840250\", element=\"f.2D0FBA87B0B5FD5986B2D52C28EA5F95.d.FF3EA40778EFE92210BABC98DA932C1B.e.6\")>\ncommand = 'clickElement'\nparams = {'id': 'f.2D0FBA87B0B5FD5986B2D52C28EA5F95.d.FF3EA40778EFE92210BABC98DA932C1B.e.6'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Parameters:\n        ----------\n        command : any\n            The name of the command to _execute as a string.\n    \n        params : dict\n            A dictionary of named Parameters to send with the command.\n    \n        Returns:\n        -------\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params[\"id\"] = self._id\n>       return self._parent.execute(command, params)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:572: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"79dd6a62b577565866d24562bb840250\")>\ndriver_command = 'clickElement', params = {}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        Parameters:\n        ----------\n        driver_command : str\n            - The name of the command to execute as a string.\n    \n        params : dict\n            - A dictionary of named Parameters to send with the command.\n    \n        Returns:\n        --------\n          dict - The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f5439f22200>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x5584cafe9e76 \\\\u003Cunknown>\\\\n#22 0x7f5c74a9caa4 \\\\u003Cunknown>\\\\n#23 0x7f5c74b29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"banner-button button open-modal\">...</button> is not clickable at point (893, 65). Other element would receive the click: <div class=\"menu-wrapper\">...</div>\nE         (Session info: chrome=134.0.6998.165)\nE       Stacktrace:\nE       #0 0x5584cafeaffa <unknown>\nE       #1 0x5584caaa9970 <unknown>\nE       #2 0x5584cab021ec <unknown>\nE       #3 0x5584cab00055 <unknown>\nE       #4 0x5584caafd6f2 <unknown>\nE       #5 0x5584caafc8ca <unknown>\nE       #6 0x5584caaef8cd <unknown>\nE       #7 0x5584cab21292 <unknown>\nE       #8 0x5584caaeee4a <unknown>\nE       #9 0x5584cab2145e <unknown>\nE       #10 0x5584cab4770c <unknown>\nE       #11 0x5584cab21063 <unknown>\nE       #12 0x5584caaed328 <unknown>\nE       #13 0x5584caaee491 <unknown>\nE       #14 0x5584cafb242b <unknown>\nE       #15 0x5584cafb62ec <unknown>\nE       #16 0x5584caf99a22 <unknown>\nE       #17 0x5584cafb6e64 <unknown>\nE       #18 0x5584caf7dbef <unknown>\nE       #19 0x5584cafd9558 <unknown>\nE       #20 0x5584cafd9736 <unknown>\nE       #21 0x5584cafe9e76 <unknown>\nE       #22 0x7f5c74a9caa4 <unknown>\nE       #23 0x7f5c74b29c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.13.2/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException","steps":[{"name":"Открытие страницы лендинга по URL: services/website-development/cms/","time":{"start":1743158542740,"stop":1743158543419,"duration":679},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"sub_url","value":"None"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"3d8eb1fd4a635a8a","name":"Screenshot","source":"3d8eb1fd4a635a8a.png","type":"image/png","size":287602}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":1,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"driver::0","time":{"start":1743158544926,"stop":1743158544988,"duration":62},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Успешная отправка заявки"},{"name":"parentSuite","value":"test"},{"name":"suite","value":"test_cms_page"},{"name":"host","value":"fv-az1057-173"},{"name":"thread","value":"5843-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.test_cms_page"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"c35b80e9cd06a829.json","parameterValues":[]}